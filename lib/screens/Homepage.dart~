import 'package:aiplant/screens/welcome_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:aiplant/servise/pdf_report_servise.dart';
import 'package:printing/printing.dart';
import  'package:path_provider/path_provider.dart';

class HomePage extends StatefulWidget {
  final String userName;
  const HomePage({required this.userName, Key? key}) : super(key: key);

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String? _selectedPlant;
  File? _selectedImage;
  final ImagePicker _picker = ImagePicker();
  final List<String> _plants = [
    'Apple',
    'BlueBerry',
    'Cherry',
    'Corn',
    'Grape',
    'Orange',
    'Peach',
    'Pepper',
    'Potato',
    'Raspberry',
    'Soybean',
    'Squash',
    'Strawberry',
    'Tomato',
  ];

  Future<void> _pickImage(ImageSource source) async {
    final pickedFile = await _picker.pickImage(source: source);
    if (pickedFile != null) {
      setState(() {
        _selectedImage = File(pickedFile.path);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Plant Diagnosis'),
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: theme.colorScheme.onPrimary,
        elevation: 0,
      ),
      drawer: _buildDrawer(theme),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildPlantDropdown(theme),
            const SizedBox(height: 30),
            _buildImageUploadCard(theme),
            const SizedBox(height: 30),
            _buildDiagnoseButton(theme),
          ],
        ),
      ),
    );
  }

  Widget _buildDrawer(ThemeData theme) {
    return Drawer(
      child: ListView(
        padding: EdgeInsets.zero,
        children: [
          UserAccountsDrawerHeader(
            accountName: Text(widget.userName),
            accountEmail: Text(
                '${widget.userName.toLowerCase().replaceAll(' ', '')}@aiplant.com'),
            currentAccountPicture: CircleAvatar(
              backgroundColor: theme.colorScheme.secondary,
              child: Text(
                widget.userName[0].toUpperCase(),
                style: TextStyle(
                  fontSize: 24,
                  color: theme.colorScheme.onSecondary,
                ),
              ),
            ),
            decoration: BoxDecoration(
              color: theme.colorScheme.primary,
            ),
          ),
          Animate(
            onPlay: (controller) => controller.repeat(),
            effects: [
              SlideEffect(
                begin: const Offset(0, 1),
                end: Offset.zero,
                duration: 300.ms,
                curve: Curves.easeInOut,
              ),
            ],
            child: ListTile(
              leading: Icon(Icons.home, color: theme.colorScheme.primary),
              title: const Text('Home'),
              onTap: () => Navigator.pop(context),
            ),
          ).delayed(const Duration(milliseconds: 100)),

          Animate(
            onPlay: (controller) => controller.repeat(),
            effects: [
              SlideEffect(
                begin: const Offset(0, 1),
                end: Offset.zero,
                duration: 300.ms,
                curve: Curves.easeInOut,
              ),
            ],
            child: ListTile(
              leading: Icon(Icons.history, color: theme.colorScheme.primary),
              title: const Text('Diagnosis History'),
              onTap: () {

              },
            ),
          ).delayed(const Duration(milliseconds: 200)),

          Animate(
            onPlay: (controller) => controller.repeat(),
            effects: [
              SlideEffect(
                begin: const Offset(0, 1),
                end: Offset.zero,
                duration: 300.ms,
                curve: Curves.easeInOut,
              ),
            ],
            child: ListTile(
              leading: Icon(Icons.settings, color: theme.colorScheme.primary),
              title: const Text('Settings'),
              onTap: () {

              },
            ),
          ).delayed(const Duration(milliseconds: 300)),
          Divider(color: theme.colorScheme.outline),
    Animate(
    onPlay: (controller) => controller.repeat(),
    effects: [
    SlideEffect(
    begin: const Offset(0, 1),
    end: Offset.zero,
    duration: 300.ms,
    curve: Curves.easeInOut,
    ),
    ],
    child:  ListTile(
              leading: Icon(Icons.logout, color: theme.colorScheme.error),
              title: const Text('Sign Out'),
              onTap: () async {
                try {
                  await FirebaseAuth.instance.signOut();
                  Navigator.pushAndRemoveUntil(
                    context,
                    MaterialPageRoute(
                      builder: (context) => WelcomeScreen(),
                    ),
                        (route) => false,
                  );
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Signed out successfully')),
                  );
                } catch (e) {
                  // Handle errors
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Error signing out: ${e.toString()}')),
                  );
                }
              },
            ),).delayed(const Duration(milliseconds: 400),
          ),
        ],
      ),
    );
  }

  Widget _buildPlantDropdown(ThemeData theme) {
    return DropdownButtonFormField<String>(
      decoration: InputDecoration(
        labelText: 'Select Plant',
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
        ),
        prefixIcon: Icon(Icons.eco, color: theme.colorScheme.primary),
        filled: true,
        fillColor: theme.colorScheme.surfaceVariant.withOpacity(0.5),
      ),
      value: _selectedPlant,
      items: _plants.map<DropdownMenuItem<String>>((String plant) {
        return DropdownMenuItem<String>(
          value: plant,
          child: Text(plant),
        );
      }).toList(),
      onChanged: (String? newValue) {
        setState(() {
          _selectedPlant = newValue;
        });
      },
    );
  }

  Widget _buildImageUploadCard(ThemeData theme) {
    return Card(
      elevation: 2,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(15),
      ),
      child: Padding(
        padding: const EdgeInsets.all(15),
        child: Column(
          children: [
            Text(
              'Plant Image',
              style: theme.textTheme.titleMedium?.copyWith(
                color: theme.colorScheme.primary,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 15),
            _selectedImage != null
                ? ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: Image.file(
                _selectedImage!,
                height: 200,
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            )
                : Container(
              height: 200,
              decoration: BoxDecoration(
                color: theme.colorScheme.surfaceVariant.withOpacity(0.3),
                borderRadius: BorderRadius.circular(10),
                border: Border.all(
                  color: theme.colorScheme.outline.withOpacity(0.5),
                ),
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    Icons.photo_camera,
                    size: 50,
                    color: theme.colorScheme.onSurfaceVariant,
                  ),
                  const SizedBox(height: 10),
                  Text(
                    'No image selected',
                    style: TextStyle(
                      color: theme.colorScheme.onSurfaceVariant,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 15),
            Row(
              children: [
                Expanded(
                  child: OutlinedButton.icon(
                    icon: Icon(Icons.photo_library),
                    label: const Text('Gallery'),
                    style: OutlinedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      side: BorderSide(color: theme.colorScheme.primary),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    onPressed: () => _pickImage(ImageSource.gallery),
                  ),
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: OutlinedButton.icon(
                    icon: Icon(Icons.camera_alt,
                        color: Theme.of(context).colorScheme.primary),
                    label: Text(
                      'Camera',
                      style: TextStyle(
                          color: Theme.of(context).colorScheme.primary),
                    ),
                    style: OutlinedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 12),
                      side: BorderSide(
                          color: Theme.of(context).colorScheme.primary),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    onPressed: () => _pickImage(ImageSource.camera),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildDiagnoseButton(ThemeData theme) {
    return ElevatedButton(
      onPressed: _selectedPlant == null || _selectedImage == null
          ? null
          : () async {
        try {
          // Show loading indicator
          showDialog(
            context: context,
            barrierDismissible: false,
            builder: (context) => const Center(
              child: CircularProgressIndicator(),
            ),
          );

          // Generate PDF report
          final pdfFile = await PdfReportService.generateDiagnosticReport(
            plantName: _selectedPlant!,
            plantImage: _selectedImage!,
            userName: widget.userName,
          );

          // Close loading dialog
          if (mounted) Navigator.of(context).pop();

          // Preview the PDF
          await Printing.layoutPdf(
            onLayout: (format) => pdfFile.readAsBytes(),
          );

          // Optional: Show success message
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Report generated successfully')),
          );
        } catch (e) {
          if (mounted) Navigator.of(context).pop();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Error generating report: ${e.toString()}')),
          );
        }
      },
      style: ElevatedButton.styleFrom(
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: theme.colorScheme.onPrimary,
        padding: const EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10),
        ),
        elevation: 2,
      ),
      child: const Text(
        'Diagnose Plant',
        style: TextStyle(fontSize: 16),
      ),
    );
  }

}
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:flutter/services.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

class PdfReportService {
  static Future<File> generateDiagnosticReport({
    required String plantName,
    required File plantImage,
    required String userName,
  }) async {
    final pdf = pw.Document();

    // Load logo image
    final logoImage = await rootBundle.load('assets/images/pic1.png');
    final logo = pw.MemoryImage(logoImage.buffer.asUint8List());

    // Load user's plant image
    final imageBytes = await plantImage.readAsBytes();
    final plantImagePw = pw.MemoryImage(imageBytes);

    pdf.addPage(
      pw.Page(
        pageFormat: PdfPageFormat.a4,
        build: (pw.Context context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              // Header with logo
              pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Image(logo, height: 50),
                  pw.Text(
                    'Plant Diagnostic Report',
                    style: pw.TextStyle(
                      fontSize: 20,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                ],
              ),
              pw.Divider(),
              pw.SizedBox(height: 20),

              // User information
              pw.Text('User: $userName', style: pw.TextStyle(fontSize: 14)),
              pw.SizedBox(height: 10),
              pw.Text('Date: ${DateTime.now().toString().split(' ')[0]}',
                  style: pw.TextStyle(fontSize: 14)),
              pw.SizedBox(height: 30),

              // Plant information
              pw.Text('Diagnosed Plant: $plantName',
                  style: pw.TextStyle(
                    fontSize: 18,
                    fontWeight: pw.FontWeight.bold,
                  )),
              pw.SizedBox(height: 20),

              // Plant image
              pw.Text('Plant Image:', style: pw.TextStyle(fontSize: 16)),
              pw.SizedBox(height: 10),
              pw.Center(
                child: pw.Container(
                  height: 200,
                  child: pw.Image(plantImagePw),
                ),
              ),
              pw.SizedBox(height: 30),

              // Results section
              pw.Text('Diagnostic Results:',
                  style: pw.TextStyle(
                    fontSize: 18,
                    fontWeight: pw.FontWeight.bold,
                  )),
              pw.SizedBox(height: 10),
              pw.Text('Plant type confirmed: $plantName',
                  style: pw.TextStyle(fontSize: 14)),
              pw.SizedBox(height: 10),
              pw.Text('Visual inspection completed',
                  style: pw.TextStyle(fontSize: 14)),
              pw.SizedBox(height: 30),

              // Footer
              pw.Divider(),
              pw.Text('Generated by AI Plants Diagnostic App',
                  style: pw.TextStyle(fontSize: 12)),
            ],
          );
        },
      ),
    );

    // Save the PDF
    final output = await getTemporaryDirectory();
    final file = File('${output.path}/diagnostic_report_${DateTime.now().millisecondsSinceEpoch}.pdf');
    await file.writeAsBytes(await pdf.save());
    return file;
  }
}